/**
 * Script para importar dados do backup MongoDB para PostgreSQL
 * Converte dados do MongoDB para o formato do MedusaJS
 */

import { BSON } from "bson"
import { readFileSync } from "fs"
import { gunzipSync } from "zlib"

const MONGODB_BACKUP_PATH = "/Users/filippoferrari/Documents/ARQUIVOS-MECA/Meca"

async function importData() {
  console.log("üöÄ Iniciando importa√ß√£o de dados do MongoDB...")
  
  try {
    // Importar workshops
    await importWorkshops()
    
    // Importar ve√≠culos
    await importVehicles()
    
    // Importar agendamentos
    await importSchedulings()
    
    // Importar usu√°rios
    await importUsers()
    
    console.log("‚úÖ Importa√ß√£o conclu√≠da com sucesso!")
    
  } catch (error) {
    console.error("‚ùå Erro na importa√ß√£o:", error)
  }
}

async function importWorkshops() {
  console.log("üì¶ Importando workshops...")
  
  try {
    const workshopData = readBSONFile(`${MONGODB_BACKUP_PATH}/Workshop.bson.gz`)
    
    for (const workshop of workshopData) {
      console.log(`Importando workshop: ${workshop.name}`)
      
      // Aqui voc√™ criaria o workshop no MedusaJS
      // usando o m√≥dulo de oficina que j√° temos
    }
    
  } catch (error) {
    console.error("Erro ao importar workshops:", error)
  }
}

async function importVehicles() {
  console.log("üöó Importando ve√≠culos...")
  
  try {
    const vehicleData = readBSONFile(`${MONGODB_BACKUP_PATH}/Vehicle.bson.gz`)
    
    for (const vehicle of vehicleData) {
      console.log(`Importando ve√≠culo: ${vehicle.brand} ${vehicle.model}`)
      
      // Aqui voc√™ criaria o ve√≠culo no MedusaJS
      // usando o m√≥dulo de vehicle que j√° temos
    }
    
  } catch (error) {
    console.error("Erro ao importar ve√≠culos:", error)
  }
}

async function importSchedulings() {
  console.log("üìÖ Importando agendamentos...")
  
  try {
    const schedulingData = readBSONFile(`${MONGODB_BACKUP_PATH}/Scheduling.bson.gz`)
    
    for (const scheduling of schedulingData) {
      console.log(`Importando agendamento: ${scheduling.date}`)
      
      // Aqui voc√™ criaria o booking no MedusaJS
      // usando o m√≥dulo de booking que j√° temos
    }
    
  } catch (error) {
    console.error("Erro ao importar agendamentos:", error)
  }
}

async function importUsers() {
  console.log("üë§ Importando usu√°rios...")
  
  try {
    const profileData = readBSONFile(`${MONGODB_BACKUP_PATH}/Profile.bson.gz`)
    
    for (const profile of profileData) {
      console.log(`Importando usu√°rio: ${profile.name}`)
      
      // Aqui voc√™ criaria o customer no MedusaJS
      // usando o m√≥dulo de customer padr√£o
    }
    
  } catch (error) {
    console.error("Erro ao importar usu√°rios:", error)
  }
}

function readBSONFile(filePath: string): any[] {
  try {
    const compressedData = readFileSync(filePath)
    const decompressedData = gunzipSync(compressedData)
    const bsonData = BSON.deserialize(decompressedData)
    
    // O BSON pode conter um array de documentos ou um √∫nico documento
    return Array.isArray(bsonData) ? bsonData : [bsonData]
    
  } catch (error) {
    console.error(`Erro ao ler arquivo ${filePath}:`, error)
    return []
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  importData()
}

export { importData }
